apiVersion: batch/v1
kind: CronJob
metadata:
  name: database-backup
  namespace: production
spec:
  schedule: "0 */6 * * *"  # Every 6 hours
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            vault.hashicorp.com/agent-inject: "true"
            vault.hashicorp.com/role: "backup"
            vault.hashicorp.com/agent-inject-secret-db: "secret/data/database/credentials"
        spec:
          serviceAccountName: backup
          restartPolicy: OnFailure

          containers:
            - name: backup
              image: postgres:15-alpine
              command:
                - /bin/sh
                - -c
                - |
                  #!/bin/sh
                  set -e
                  
                  # Source credentials from Vault
                  source /vault/secrets/db
                  
                  BACKUP_FILE="backup-$(date +%Y%m%d-%H%M%S).sql.gz"
                  
                  # Create backup
                  pg_dump -h $DB_HOST -U $DB_USER -d $DB_NAME | gzip > /backup/$BACKUP_FILE
                  
                  # Upload to S3
                  aws s3 cp /backup/$BACKUP_FILE s3://${BACKUP_BUCKET}/database/$BACKUP_FILE \
                    --server-side-encryption aws:kms \
                    --ssekms-key-id ${KMS_KEY_ID}
                  
                  # Cleanup local backup
                  rm /backup/$BACKUP_FILE
                  
                  # Cleanup old backups (keep last 30 days)
                  aws s3 ls s3://${BACKUP_BUCKET}/database/ | \
                    while read -r line; do
                      createDate=$(echo $line | awk {'print $1" "$2'})
                      createDate=$(date -d "$createDate" +%s)
                      olderThan=$(date -d "30 days ago" +%s)
                      if [[ $createDate -lt $olderThan ]]; then
                        fileName=$(echo $line | awk {'print $4'})
                        if [[ $fileName != "" ]]; then
                          aws s3 rm s3://${BACKUP_BUCKET}/database/$fileName
                        fi
                      fi
                    done
                  
                  echo "Backup completed: $BACKUP_FILE"

              volumeMounts:
                - name: backup
                  mountPath: /backup

              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 500m
                  memory: 512Mi

          volumes:
            - name: backup
              emptyDir: {}