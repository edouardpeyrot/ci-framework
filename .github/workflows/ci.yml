name: Multi-Cloud CI/CD Pipeline - Go Backend & JS Frontend

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '20'
  TERRAFORM_VERSION: '1.5.7'
  KUBERNETES_VERSION: '1.33'
  CLOUD_PROVIDER: 'aws'  # azure | gcp | aws

permissions:
  id-token: write
  contents: read

jobs:
  compliance:
    name: Run Compliance Checker
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write
    env:
      AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      AZURE_OPENAI_DEPLOYMENT: ${{ secrets.AZURE_OPENAI_DEPLOYMENT }}
      AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
      AZURE_OPENAI_API_VERSION: 2024-02-15-preview

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Build compliance binary
        working-directory: ./scripts
        run: |
          go build -o ../compliance-checker compliance-checker.go

      - name: Run compliance checker
        run: |
          chmod +x ./compliance-checker
          ./compliance-checker --dry-run \
            --azure-endpoint "$AZURE_OPENAI_ENDPOINT" \
            --azure-deployment "$AZURE_OPENAI_DEPLOYMENT" \
            --azure-api-key "$AZURE_OPENAI_API_KEY" \
            --api-version "$AZURE_OPENAI_API_VERSION" \
            --max-files 250 \
            --timeout 120 > compliance-report.txt

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: compliance-report.txt

  terraform-plan:
    name: Terraform Plan (${{ matrix.cloud }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cloud: [aws]  # Ajouter azure, gcp selon besoins
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan \
            -var="cloud_provider=${{ matrix.cloud }}" \
            -out=tfplan-${{ matrix.cloud }}

      - name: Trivy Terraform Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './terraform'
          format: 'sarif'
          output: 'trivy-terraform-${{ matrix.cloud }}.sarif'

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve \
            -var="cloud_provider=${{ env.CLOUD_PROVIDER }}"

  build-backend:
    name: Build Backend Docker Image
    runs-on: ubuntu-latest
    needs: [terraform-apply]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.REGISTRY_URL }}/backend:${{ github.sha }}
            ${{ secrets.REGISTRY_URL }}/backend:latest
          cache-from: type=registry,ref=${{ secrets.REGISTRY_URL }}/backend:buildcache
          cache-to: type=registry,ref=${{ secrets.REGISTRY_URL }}/backend:buildcache,mode=max

      - name: Trivy Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.REGISTRY_URL }}/backend:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-backend.sarif'

  build-frontend:
    name: Build Frontend Docker Image
    runs-on: ubuntu-latest
    needs: [terraform-apply]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.REGISTRY_URL }}/frontend:${{ github.sha }}
            ${{ secrets.REGISTRY_URL }}/frontend:latest

  kube-init:
    name: Initialize Kubernetes Cluster
    runs-on: ubuntu-latest
    needs: [terraform-apply, build-backend, build-frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.15.4

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ env.AWS_REGION }}\
            --name framework-ci-production-eks \
            --alias framework-ci

      - name: Apply namespaces
        working-directory: ./k8s
        run: kubectl apply -f namespaces.yaml

      - name: Upload kubeconfig
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig
          path: ~/.kube/config

  deploy-monitoring:
    name: Deploy Monitoring Stack
    runs-on: ubuntu-latest
    needs: [kube-init]
    steps:
      - uses: actions/checkout@v4

      - name: Download kubeconfig
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig
          path: ~/.kube

      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Prometheus Stack
        working-directory: ./helm
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install monitoring prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            -f prometheus/prometheus-values.yaml \
            --atomic --wait --timeout 10m

  deploy-vault:
    name: Deploy Vault
    runs-on: ubuntu-latest
    needs: [kube-init]
    steps:
      - uses: actions/checkout@v4

      - name: Download kubeconfig
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig
          path: ~/.kube

      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Vault
        working-directory: ./helm
        run: |
          helm repo add hashicorp https://helm.releases.hashicorp.com
          helm repo update
          helm upgrade --install vault hashicorp/vault \
            -n vault \
            -f vault/vault-values.yaml \
            --atomic --wait --timeout 10m

  deploy-velero:
    name: Deploy Velero
    runs-on: ubuntu-latest
    needs: [kube-init]
    steps:
      - uses: actions/checkout@v4

      - name: Download kubeconfig
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig
          path: ~/.kube

      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Velero
        working-directory: ./helm
        run: |
          helm repo add vmware-tanzu https://vmware-tanzu.github.io/helm-charts
          helm repo update
          helm upgrade --install velero vmware-tanzu/velero \
            -n velero \
            -f velero/velero-values.yaml \
            --set configuration.backupStorageLocation[0].bucket=${{ secrets.BACKUP_BUCKET }} \
            --atomic --wait --timeout 10m

  deploy-ingress:
    name: Deploy Ingress Controller
    runs-on: ubuntu-latest
    needs: [kube-init]
    steps:
      - uses: actions/checkout@v4
      - name: Download kubeconfig
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig
          path: ~/.kube

      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy ingress-nginx
        working-directory: ./helm
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            -n ingress \
            --create-namespace \
            --atomic --wait --timeout 10m

  kube-deploy:
    name: Deploy kubernetes manifests
    runs-on: ubuntu-latest
    needs: [deploy-vault, deploy-velero, deploy-ingress, deploy-monitoring]
    steps:
      - uses: actions/checkout@v4
      - name: Download kubeconfig
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig
          path: ~/.kube

      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Apply manifests
        working-directory: ./k8s
        run: kubectl apply -R -f .

      - name: Verify deployment
        run: kubectl get all

  check:
    name: Post deployment checks
    runs-on: ubuntu-latest
    needs: [kube-deploy]
    steps:
      - uses: actions/checkout@v4
      - name: Check App
        run: |
          set -e
          echo "Checking backend/frontend availability..."
          kubectl rollout status deployment/backend -n production --timeout=120s
          kubectl rollout status deployment/frontend -n production --timeout=120s
          kubectl get svc -n production
          echo "App deployments and services are ready."

      - name: Check Velero
        run: |
          set -e
          echo "Checking Velero backup status..."
          kubectl wait --for=condition=ready pod -l component=velero -n velero --timeout=180s
          kubectl get backup -n velero
          echo "Velero is running and accessible."

      - name: Check Keycloak
        run: |
          set -e
          echo "Checking Keycloak readiness..."
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=keycloak -n auth --timeout=180s
          kubectl port-forward svc/keycloak 8080:80 -n auth &
          sleep 10
          curl -f http://localhost:8080 || { echo "Keycloak not responding"; exit 1; }
          echo "Keycloak is responding."

      - name: Check Grafana
        run: |
          set -e
          echo "Checking Grafana service..."
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana -n monitoring --timeout=180s
          kubectl port-forward svc/monitoring-grafana 3000:80 -n monitoring &
          sleep 10
          curl -f http://localhost:3000/login || { echo "Grafana not responding"; exit 1; }
          echo "Grafana is responding."

      - name: Check Prometheus
        run: |
          set -e
          echo "Checking Prometheus targets..."
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=prometheus -n monitoring --timeout=180s
          kubectl port-forward svc/monitoring-kube-prometheus-prometheus 9090:9090 -n monitoring &
          sleep 10
          curl -f http://localhost:9090/api/v1/status/runtimeinfo || { echo "Prometheus not responding"; exit 1; }
          echo "Prometheus is responding."

      - name: Check Vault
        run: |
          set -e
          echo "Checking Vault status..."
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=vault -n security --timeout=180s
          kubectl exec -n security deploy/vault -- vault status || { echo "Vault not ready or sealed"; exit 1; }
          echo "Vault is unsealed and ready."

  terraform-destroy:
    name: Terraform destroy
    runs-on: ubuntu-latest
    needs: [ check ]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Destroy
        run: |
          cd terraform
          terraform destroy -auto-approve \
            -var="cloud_provider=${{ env.CLOUD_PROVIDER }}"